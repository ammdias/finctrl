FINANCE CONTROL MANUAL
======================

This is a very basic program to control personal finances.  It depends on
Python 3 and was thought to be used only from the command line.  It
supports multiple accounts with possibly different currencies and transactions
composed of multiple parcels, each with its different tags.  Check the [USAGE]
section for a more complete overview of the program.

Copyright (C) 2021 António Manuel Dias

contact: ammdias@gmail.com

website: [AMMDIAS](https://ammdias.duckdns.org/downloads)

### Changes history

* 0.1: Initial version


CONTENTS
--------

  * [Changes history]
* [FOREWORD]
  * [Text conventions used in this manual]
* [INSTALLATION]
* [USAGE]
  * [Command line]
  * [Starting and quitting the program]
  * [Creating and opening a file]
  * [Default settings]
  * [Getting help]
  * [Currencies]
  * [Accounts and Transactions]
  * [Advanced usage]
    * [Usage in MS Windows]
    * [Scripting]
* [REFERENCE]
  * [add]
  * [backup]
  * [bye]
  * [change]
  * [close]
  * [delete]
  * [help]
  * [list]
  * [open]
  * [set]
  * [show]
  * [source]
  * [trim]
  * [Database structure]
* [LICENSE]


FOREWORD
--------

### Text conventions used in this manual


INSTALLATION
------------

The instructions below are for installation on a modern Linux system.  They
may work on other modern Unix-like systems like BSD derivatives, including
MacOS, but that has not been tested and may require some tweaking.  Try it at
your own risk.  For MS Windows installation, refer to the section
[Usage in MS Windows].

1. Download and unzip the program's compressed file in a directory of your
   choosing.  To download the most recent version, check the [AMMDIAS
   GitHub page](https://github.com/ammdias/finctrl).

2. Open a terminal in the directory where the program was uncompressed and run
   the installation script with Python 3:

         $ python3 INSTALL.py

     You will be prompted for the installation directory --- i.e. the directory
     under which the folder containing all the application files will be placed
     --- and for the start link directory --- i.e. the directory where the
     symbolic link for the program will be created.

     The default directories will install the program for the current user only
     and are suited for single-user systems.  If you want to keep these
     settings, just press ENTER when prompted.  The program will be installed in
     the directory `$HOME/.local/lib/FinCtrl` and the symbolic link
     `$HOME/.local/bin/finctrl` will be created.  On most Linux systems the
     `$HOME/.local/bin` directory will be inserted in the execution PATH, if it
     exists. If it doesn't, you will have to add it manually.

     If you want to install the program for all the users of the system, you
     should change the directories accordingly, e.g. `/usr/local/lib` for the
     installation directory and `/usr/local/bin` for the start link.  Of
     course, you will need to run the installation script with administration
     privileges:

         $ sudo python3 INSTALL.py

     If a previous installation exists on the selected directory, you will be
     asked if you want to overwrite it.  Answer "`yes`" (or just "`y`") if that
     is the case or "`no`"/"`n`" if not.

3. Test that the installation was successful with the command:

       $ finctrl

   (this should open the program and present its default prompt)

   Now, enter the following commands:

       FinCtrl > help

   (the program should present a list of all the available commands)

       FinCtrl > bye

   (the program should close; you may also use the end-of-file
   command -- CTRL-D in Linux -- to close the program)


USAGE
-----

The purpose of this program is to control a user's personal finances by means of
a simple command line interface.  The user may configure several *accounts* (e.g.
a bank account, a savings account, the credit card account, etc.), each with its
own *currency*.  All operations on the accounts are entered as *transactions*,
each of which may be composed of several *parcels*.  This way, a supermarket bill
may be split on its items, so that the user may have a more fine control over his
or hers expenses.  Each parcel may also be tagged with several tags, allowing the
listing of the spendings (or earnings) by category.

The data is stored in standard [SQLite](https://sqlite.org) files (database
structure documented in the [Advanced Usage] section).  One file should be fine
for each user, but any number of them may be used if the user wants to split its
accounts over several subjects.

In this section I will try to give an overview of the program usage and its
possibilities.  I will do this in a *story-telling like* fashion, in each step
describing a new feature and the way to use it.  For the complete command
reference, you should then refer to the appropriate [REFERENCE] subsection.

### Command line interface

I assume that the user is familiarized with the *normal* way a command line
interface works --- basically, issuing commands at the prompt and reading the
program's answer, if any.  Some notes:

1. Blank lines will have no effect (will just be ignored);

2. If your system supports it, you will have command history in each session:
   press arrow up or `CTRL+P` for previous command / arrow down or `CTRL-N` for
   the next.  The usual control key bindings may also work:
      * `CTRL+A` to go to the beginning of the line;
      * `CTRL+E` to go to the end;
      * `CTRL+W` to delete previous word;
      * `CTRL+K` to delete from the cursor to the end of the line;
      * etc.

3. When entering a command longer than a screen line, you may split it over
   several lines by ending each line (except the last) with a single backslash:
   "`\`".  The promtp after that will change to a single colon (`:`) until you
   end the command.  If you make a mistake while entering a multi-line command,
   just finish the line with three consecutive backslashes (`\\\`) to discard
   the whole command. 

       FinCtrl > help \
               : bye
       Quit Finance Control.
      
       FinCtrl > help \
               : something wrong \\\
       FinCtrl >  

4. All commands are case-sensitive, so `bye` is different from `BYE` or `Bye`
   --- the first will be recognised as a command and quit the program, but the
   others will originate an error message:

        FinCtrl > Bye
        *** Error: (Syntax) 'Bye' is not a recognized command.

5. Some commands or options have a shortcut version that may be used
   interchangeably.  That will be indicated in the [REFERENCE] section and in
   the online help by enveloping the optional letters in square brackets.  For
   example, the [show] command may be entered as `show` or `sh`:

       FinCtrl > help show
       Show all data of a specific record:
               > sh[ow] settings|manual [inline]|copyright|license [inline]
               > sh[ow] curr[ency] NAME
               > sh[ow] acc[ount] ACCOUNT_NAME|ACCOUNT_ID
               > sh[ow] tr[ansaction] TRANSACTION_ID

       FinCtrl > show copyright
       Finance Control 0.1
       (C) 2021 António Manuel Dias <ammdias@gmail.com>
       (...)

   or

       FinCtrl > sh copyright
       Finance Control 0.1
       (C) 2021 António Manuel Dias <ammdias@gmail.com>
       (...)

6. If a line of the output of a command is longer than the terminal width, it
   will be truncated and end with an ellipsis (`...`).  If the output has more
   lines than fit in the terminal height then the output will be split in pages
   and at the end of each page you will have the option to go to the next page
   (enter `next` or `n`), go back to the previous (enter `previous` or `p`) or
   quit the presentation (enter `quit` or `q`). 

       FinCtrl > show license inline

       ### GNU GENERAL PUBLIC LICENSE

       Version 3, 29 June 2007

       Copyright (C) 2007 Free Software Foundation, Inc.
       <https://fsf.org/>

       Everyone is permitted to copy and distribute verbatim copies of this
       license document, but changing it is not allowed.

       Page 1 of 30. (N)ext / (P)revious / (Q)uit ? q

       FinCtrl >


### Starting and quitting the program

Assuming the program is correctly installed, to start the program just open a
terminal and type:

    $ finctrl

The prompt should change to the standard prompt:

    FinCtrl >

To close the program, use the [bye] command:

    FinCtrl > bye
    Bye.

The program will exit and print a goodbye message and the prompt will change to
the terminal's prompt.  Alternately, you may quit the program by typing the
system's end-of-file keyboard shortcut (CTRL-D in Linux) or `EOF`. 

### Getting help

There are not many things you can do after starting the program -- most require
an open file to work upon. One thing one can do is open a file but we will cover
that at the next subsection. Another is to show some information about the
program itself and the syntax and purpose of each command --- getting help.

If we use the [help] command without arguments, the program will print all the
available commands:

    FinCtrl > help

    Documented commands (type help <topic>):
    ========================================
    EOF  backup  ch      close  delete  list  open  sh    source
    add  bye     change  del    help    ls    set   show  trim  

We may also obtain help on a specific command by typing `help`  followed by the
name of the command.  For example, for the [show] command:

    FinCtrl > help show
    Show all data of a specific record:
            > sh[ow] settings|manual [inline]|copyright|license [inline]
            > sh[ow] curr[ency] NAME
            > sh[ow] acc[ount] ACCOUNT_NAME|ACCOUNT_ID
            > sh[ow] tr[ansaction] TRANSACTION_ID

The program will print a brief description of the purpose of the command
followed by a list of the command's allowed syntax. In every syntax description,
the text between square brackets (`[]`) is optional. Text in lower case letters
is mandatory and must be entered as-is.  Several options separated by vertical
bars (the *pipe* character: `|`) mean that one (and only one) of them must be
chosen. Finally, text in capital letters is information that must be provided
or chosen by the user.

The first syntax line of the example above explains how to use the [show]
command to display some information pertaining to the program.  The command may
be written as `show` or `sh` (the bracketed `ow` is optional) and must be
followed by only one of the options separated by vertical bars, `settings`,
`manual`, `copyright` or `license`.

For example, to show the program's copyright information, we could type:

    FinCtrl > show copyright
    Finance Control 0.1
    (C) 2021 António Manuel Dias <ammdias@gmail.com>
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Both the `manual` and `license` information will be shown on a new web
browser window, assuming one is installed on your system:

    FinCtrl > sh manual
    The program's manual should be displayed in your browser.
    If this doesn't happen, please read the file 'MANUAL'
    in the program's installation directory.

Finally, we could also show the current program settings, but as they are
specific to each file (and kept in it), this command terminates with an
error message:

    FinCtrl > sh settings
    *** Error: 'show' command needs an open file.

The next section will cover how to work with files.


### Creating and opening a file

As stated earlier, the program keeps all information in
[SQLite](https://sqlite.org) files.  To open a file we use the [open] command:

    FinCtrl > open test.sqlite
    test.sqlite > 

The [open] command takes a single argument, the path to the file to be opened.
If a relative path is given, the directory where the program was started is the
base directory. The tilde (`~`) may be used as the replacement for the user's
home absolute path.  For example, in my case, if I used the command
`open ~/doc/accounting.sqlite` the opened file would be
`/home/antonio/doc/accounting.sqlite`.  This is standard Unix notation, but may
also be used in other systems.

I used the `.sqlite` extension because this way I can at a glance identify this
as an SQLite file when I list my system's directory, but the program doesn't
require any particular extension and you may even use files without one.

If the file does not exist, it will be created with default settings (more
about this in the subsection below). If it exists but is not a FinCtrl file, an
error will be presented and the file will not be opened:

    FinCtrl > open testfile.txt
    *** Error: unable to open file. Reason:
        file is not a database

To close the file, use the [close] command.  All changes are automatically
written to the file as they are made, so there is no need to do it manually.

    test.sqlite > close
    FinCtrl > 

There is no need to close the open file before quitting the program, as this
will be done automatically.  Also, when opening another file, the previous
will be closed.  In fact, the only reason to close a file is to return the
program to its default behaviour before opening any file.

It is also possible to immediately open a file when starting the program,
passing its path as argument:

    $ finctrl test.sqlite
    test.sqlite >

You should have noticed that the prompt changes when a file is opened.  The
prompt is one of the program's settings and is stored in each file.  If no
change has been made, the prompt will then be the file name.


### Default settings

Every open file has a set of default settings that govern the behaviour of some
of the program's operations.  We can find the current file's settings with the
[show] `settings` command (a file must be already opened):

    test.sqlite > sh settings
    Prompt: test.sqlite > 
    Field separator for CSV files: ;
    Default deposit text: Deposit
    Default withdrawal text: Withdrawal
    Default transfer text: Transfer
    Default currency: default
    
The settings are:

- *Prompt*: the prompt to be displayed when the file is opened;
- *CSV files' field separator*: the character used to separate fields when
  exporting results to a CSV file;
- *Default deposit, withdrawal and transfer text*: the text used as
  description for any of those operations if none is given when issuing the
  command;
- *Default currency*: the name of the currency to be used for any new account if
  none is given when creating one.

All the settings may be changed with the [set] command.  For example, to change
the prompt:

    test.sqlite > set prompt 'Test > '
    Test > 

Note that the new prompt is given between quotes.  The reason for this is that
it contains spaces and would be interpreted as two different arguments if not
surrounded by quotes, which would result in an error:

    Test > set prompt Test >
    *** Error: 'set prompt' command takes a single argument:
        > set prompt TEXT

Single- or double-quotes may be used, but we must do this for every argument
that includes spaces.

After changing the prompt, this setting will be preserved in the file and will
be used every time it is opened.  The other settings may be changed the same
way.  To change the default currency, the name of an existing currency must be
used, otherwise an error will be shown:

    Test > set currency euro
    *** Error: unable to set currency. Reason:
        Currency not found.


### Currencies

In this program's context, a currency is just a collection of settings to
correctly display monetary amounts.  We can list the configured currencies
with the [list] `currencies` command:

    Test > list currencies
    Name    | Sort name | Symbol | Position | Decimal places | Decimal separator
    --------+-----------+--------+----------+----------------+------------------
    default |           |        | left     | 2              | .                

There is always at least one configured currency, named `default`.  We can
always check a currency settings with the [show] `currency` command:

    Test > sh curr default
    Name: default
    Short name: 
    Symbol: 
    Symbol position: left
    Decimal places: 2
    Decimal separator: .

These are the properties of a currency:

- *Name*: the name for which the currency is know in the program.  You will
  need this name every time you have to identify the currency, for example, to
  assign it to an account.
- *Short name*: this is the abbreviation for the currency, like EUR for Euro or
  USD for United States Dollar.  Currently it has no purpose in the program.
- *Symbol*: the currency symbol, like '€' for Euro.  Currently it has no use in
  the program.
- *Position*: the position of the symbol when writing an amount. Must be `left`
  or `right`. Currently it has no use in the program.
- *Decimal places*: this indicates the precision of the currency.  All amounts
  will be stored and displayed with this precision.
- *Decimal separator*: this is the symbol used to split a currency amount
  integer and decimal parts.  It will be used to display all currency
  quantities and to scan the quantities input by the user.

If all your accounts are in the same currency, you may use the default and
change its settings as you desire.  If not or if you prefer to have the
currency name correspond to its actual name, you must use the [add] `currency`
command.  Let's add the Euro currency to the Test file:

    Test > add curr Euro short EUR symbol € position right
    Test > 

The only required argument is the name of the currency to add, all others are
optional.  If an argument is not given, the value from the `default` currency
will be used.  We may confirm this showing the properties of the currency
we just added and comparing it to the default:

    Test > sh curr euro
    Name: Euro
    Short name: EUR
    Symbol: €
    Symbol position: right
    Decimal places: 2
    Decimal separator: .

To change one of the values, we use the [change] `currency` command:

    Test > ch curr euro decsep ,
    Test >
    Test > sh curr euro
    Name: Euro
    Short name: EUR
    Symbol: €
    Symbol position: right
    Decimal places: 2
    Decimal separator: ,
    Test >

The euro decimal separator was changed to a comma.

Finally, we may want to make the Euro currency the default to be used on any
new account.  For this, we use the [set] `currency`  command:

    Test > set curr euro
    Test > 
    Test > sh settings
    Prompt: Test > 
    CSV files' field separator: ;
    Default deposit text: Deposit
    Default withdrawal text: Withdrawal
    Default transfer text: Transfer
    Default currency: Euro

### Accounts and Transactions

For the purpose of this program, accounts are the entities where money is
stored.  They will always have a balance, which is the total amount available,
and a *current* balance, which is the amount available at the current date.

> add acc[ount] TEXT [descr[iption] TEXT] [curr[ency] NAME




### Advanced usage

* backup
* trim

#### Usage in MS Windows

#### Scripting


REFERENCE
---------

### add
    
    > add curr[ency] TEXT [short TEXT] [symbol TEXT] [position LEFT|RIGHT] \\
    :                [decplaces NUMBER] [decsep CHARACTER]

    > add acc[ount] TEXT [descr[iption] TEXT] [curr[ency] NAME]

    > add deposit of AMOUNT on ACCOUNT_NAME|ACCOUNT_ID \\
    :             [descr TEXT] [date DATE] [tags LIST]


    > add withdrawal of AMOUNT on ACCOUNT_NAME|ACCOUNT_ID \\
    :             [descr TEXT] [date DATE] [tags LIST]

    > add tranfer of AMOUNT [descr TEXT] [date DATE] [tags LIST]
    :             from ACCOUNT_NAME|ACCOUNT_ID to ACCOUNT_NAME|ACCOUNT_ID

    > add tr[ansaction] on ACCOUNT_NAME|ACCOUNT_ID \\
    :                   [neg] [descr[iption] TEXT] [date DATE] \\
    :                   of AMOUNT | parcel "TEXT AMOUNT [tags LIST]"...

    > add exp[ense] on ACCOUNT_NAME|ACCOUNT_ID \\
    :                  [descr[iption] TEXT] [date DATE] \\
    :                  of AMOUNT | parcel "TEXT AMOUNT [tags LIST]"...

    > add parcel TEXT of AMOUNT on TRANSACTION_ID [tags LIST]

    > add tag TEXT to PARCEL_ID

### backup

    > backup FILE

### bye

    > bye|EOF

### change

    > ch[ange] curr[ency] NAME [short TEXT] \\
    :                        [symbol TEXT] [position LEFT|RIGHT] \\
    :                        [decplaces NUMBER] [decsep CHARACTER]

    > ch[ange] acc[ount] ACCOUNT_NAME|ACCOUNT_ID to TEXT

    > ch[ange] tr[ansaction] TRANSACTION_ID descr[iption] to TEXT

    > ch[ange] tr[ansaction] TRANSACTION_ID date to DATE

    > ch[ange] tr[ansaction] TRANSACTION_ID acc[ount] \\
    :                      to ACCOUNT_NAME|ACCOUNT_ID

    > ch[ange] parcel PARCEL_ID descr[iption] to TEXT

    > ch[ange] parcel PARCEL_ID amount to AMOUNT

    > ch[ange] tag TAG to TEXT

### close

    > close

### delete

    > del[ete] acc[ount] ACCOUNT_NAME|ACCOUNT_ID

    > del[ete] tr[ansaction] TRANSACTION_ID

    > del[ete] parcel PARCEL_ID

    > del[ete] tag TEXT from PARCEL_ID

    > del[ete] tag TEXT

### help

    > help|? [COMMAND]

### list

    > list|ls curr[encies] [NAME] [tofile FILE]

    > list|ls acc[ounts] [ACCOUNT_NAME] [tofile FILE]

    > list|ls tr[ansactions] [on ACCOUNT_NAME|ACCOUNT_ID] \\
    :                     [from DATE] [to DATE] [tofile FILE]

    > list|ls parcels tagged LIST [from DATE] [to DATE] [tofile FILE]

    > list|ls tags [tofile FILE]

### open

    > open FILE

### set

    > set echo ON|OFF

    > set prompt TEXT

    > set csvsep CHARACTER

    > set curr[ency] NAME

    > set withdrawal descr[iption] TEXT

    > set deposit descr[iption] TEXT

    > set transfer descr[iption] TEXT

### show

    > sh[ow] manual|copyright|license

    > sh[ow] settings

    > sh[ow] curr[ency] NAME

    > sh[ow] acc[ount] ACCOUNT_NAME|ACCOUNT_ID

    > sh[ow] tr[ansaction] TRANSACTION_ID

### source

    > source FILE

### trim

    > trim storage upto DATE

    > trim acc[ount] ACCOUNT_NAME|ACCOUNT_ID upto DATE

### Database structure

    CREATE TABLE metadata (
         key         text not null,
         value       text not null,
         primary key (key)
    );
    
    CREATE TABLE currencies (
        name        text not null,
        short_name  text,
        symbol      text,
        symbol_pos  text,
        dec_places  integer,
        dec_sep     text,
        primary key (name)
    );
    CREATE TRIGGER del_currency before delete on currencies
    begin
        delete from accounts where currency=old.name;
    end;
    
    CREATE TABLE accounts (
        key         integer,
        name        text not null,
        balance     integer,
        descr       text,
        currency    text,
        primary key (key),
        foreign key (currency) references currencies(name)
    );
    CREATE TRIGGER del_account before delete on accounts
    begin
        delete from transactions where account=old.key;
    end;
    
    CREATE TABLE transactions (
        key         integer,
        account     integer not null,
        date        text,
        descr       text,
        amount      integer not null,
        accbalance  integer not null,
        primary key (key),
        foreign key (account) references accounts(key)
    );
    CREATE TRIGGER del_transaction before delete on transactions
    begin
        delete from parcels where trans=old.key;
    end;
    
    CREATE TABLE parcels (
        key         integer,
        trans       integer not null,
        descr       text,
        amount      integer not null,
        primary key (key),
        foreign key (trans) references transactions(key)
    );
    CREATE TRIGGER del_parcel after delete on parcels
    begin
        delete from parceltags where parcel=old.key;
    end;
    
    CREATE TABLE parceltags (
        parcel      integer not null,
        tag         text not null,
        primary key (parcel, tag),
        foreign key (parcel) references parcels(key)
    );


LICENSE
-------

Copyright (C) 2021 António Manuel Dias

contact: ammdias@gmail.com

website: [AMMDIAS](https://ammdias.duckdns.org/downloads)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
GNU General Public License for more details.

You should have received a copy of the [GNU General Public
License](http://www.gnu.org/licenses) along with this program.  If not,
please check the site above.


